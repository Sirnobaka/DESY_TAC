#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <stdint.h>
#include <unistd.h>

#include "CAENVME.h"
//#include "HV.h"
#include "HV6519.h"
#include <sys/types.h>
CAENVME * vme= NULL;
HV6519 *hv = NULL;

using namespace std;

void do_exit(){
  if(NULL!=hv) delete hv;
  if(NULL!=vme)  vme->closeVME();
  signal(SIGTERM,SIG_DFL);
  signal(SIGINT ,SIG_DFL);
  exit(0);    
}

void setVoltage(float v){
    //  function for IV scan
    if (abs(v) < 50)
      hv->SetVoltage(v, true);
    else
      cout << ".......0-0......" << endl;
}

void signalHandler(int signal) {
  std::cout << std::endl << "Process " << getpid() << " received signal "  << signal << std::endl;
  if(signal==SIGTERM||signal==SIGKILL||signal==SIGINT)
    do_exit();
}

void do_usage(){
  cout<<"#### HV control with DDC cmd via GPIB ####"<<endl;
  cout<<"usage:./hvctl [arguments]"<<endl;
  cout<<"  -aVME <address HEX>    VME Base address"<<endl;
  cout<<"  -v <volt>              voltage value"<<endl;
  cout<<"  -ch <channel>           channel (conflict with adress!! default0)"<<endl;
  cout<<"  -off                   turn device off"<<endl;
  cout<<"  -read                  read "<<endl;
  cout<<"  -scan <vmin vmax vstep sleeptime(s)> -  scan IV"<<endl; 
  

}

int main(int argc, char* argv[])
{
  int VMEADD  = -1;  // VME address
  int CHANNEL = 0;
  if(argc<2){
    do_usage();
    exit(0);
  }
  signal(SIGTERM,signalHandler);
  signal(SIGINT ,signalHandler);

  //****************** argument test********************//
  int index =0;
  float volt = 0.0;
  float vmin = 0.0;
  float vmax = 0.0;
  float vstep = 0.0;
  int sleeptime = -1;
  bool off=0;
  bool read=0;
  bool scan=0;
  
  // setting for scanner loop
  //
  while(index<argc){
    
    if(strcmp(argv[index],"-aVME")==0){
      if((index+1)<argc){
	sscanf(argv[++index],"%X",&VMEADD);
      }
      else{
	do_usage();
	exit(0);
      }
    }    
    
    if(strcmp(argv[index],"-v")==0){
      if((index+1)<argc) {
	volt = atof(argv[++index]);
	cout<<"Voltage "<<volt<<endl;
      }
    
      else{
	do_usage();
	exit(0);
      }
    }
    
    if(strcmp(argv[index],"-ch")==0){
      CHANNEL = atoi(argv[++index]);
      cout<<"Channel: "<<CHANNEL<<endl;
    }
    
    if(strcmp(argv[index],"-off")==0){
      off=1;
    }
    
    if(strcmp(argv[index],"-read")==0){
      read=1;
    }
    
    if(strcmp(argv[index],"-scan")==0){
      scan=1;
      index++;
      vmin = atof(argv[index]);
      index++;
      vmax = atof(argv[index]);
      index++;
      vstep = atof(argv[index]);
      index++;
      sleeptime = atoi(argv[index]);
      if(vmin==0. || vmax==0. || vstep==0. || sleeptime==-1){
	do_usage();
	exit(0);
      }
    }
    index++;
  }
  if(!off && volt==0 && !read && !scan){
    do_usage();
    exit(0);
  }

  else if(-1!=VMEADD){
    vme = new CAENVME(cvA32_U_DATA,cvD16);
    vme->initVME();
    printf("VME address: %X \n",VMEADD);
    hv = new HV6519(VMEADD,CHANNEL,vme);
  }else{
    do_usage(); 
    exit(0);
  }

  if(volt!=0.0){
    cout<<"Setting Voltage to: "<<volt<<endl;
    if (abs(volt) < 50)
      hv->SetVoltage(volt, false); // false parameter to switch silent mode off
    else
      cout << ".......0-0......" << endl;
    float curr=hv->ReadCurrent();
    cout << endl << "Current: " << curr << endl;
  }
    
  if(off){
    cout<<"Turn HV off"<<endl;
    hv->SetVoltage(-0.0, false); // false parameter to switch silent mode off
    delete hv;
  }
  if(read) {
    cout<<"Reading"<<endl;
    float curr=hv->ReadCurrent();
    float vvmon=hv->ReadVoltage();
    cout << endl << " Voltage: " << vvmon <<"\tCurrent: " << curr << endl;
  }
  if(scan) {
    cout<<"### IV scan"<<endl;
    float ivolt = vmin;
    cout << "### vmin = " << vmin << "\tvmax = " << vmax << "\tsteps = "
	 << vstep << "\tsleeptime = " << sleeptime << endl;
    cout << "Voltage:\tCurrent:"<< endl;
    while(abs(ivolt) <= abs(vmax) && !(abs(ivolt) < abs(vmin)) ){
      setVoltage(ivolt);
      sleep((unsigned int)sleeptime);
      cout << hv->ReadVoltage() << "\t" << hv->ReadCurrent() << endl;
      ivolt+=vstep;
    }
  }
  //   do_exit();  //   do_exit();
    
  if(NULL!=vme)  vme->closeVME();
  return EXIT_SUCCESS;
}
